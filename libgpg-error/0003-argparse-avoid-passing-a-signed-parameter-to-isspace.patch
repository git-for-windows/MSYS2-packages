From e19acaa56e27acaa9acdadff5f0a8fd0e3399c15 Mon Sep 17 00:00:00 2001
From: Johannes Schindelin <johannes.schindelin@gmx.de>
Date: Sun, 30 Apr 2023 12:51:32 +0200
Subject: [PATCH 3/3] argparse: avoid passing a signed parameter to `isspace()`
 and friends

In Cygwin, the `isspace()` family of functions seem to be inline
functions that directly access an array if the parameter is below a
certain threshold, without guarding against negative values.

The symptom looks like this:

	argparse.c: In function 'set_opt_arg':
	argparse.c:2870:38: warning: array subscript has type 'char' [-Wchar-subscripts]
	 2870 |       while (isascii (*s) && isspace(*s))
	      |                                      ^~

Let's accommodate for that.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
---
 src/argparse.c | 24 ++++++++++++------------
 1 file changed, 12 insertions(+), 12 deletions(-)

diff --git a/src/argparse.c b/src/argparse.c
index 8651e00..394a908 100644
--- a/src/argparse.c
+++ b/src/argparse.c
@@ -826,8 +826,8 @@ substitute_vars (gpgrt_argparse_t *arg, const char *string)
         }
       else
         {
-          for (pend = p+1; (*pend && isascii (*p)
-                            && (isalnum (*pend) || *pend == '_')); pend++)
+          for (pend = p+1; (*pend && isascii ((unsigned char)*p)
+                            && (isalnum ((unsigned char)*pend) || *pend == '_')); pend++)
             ;
         }
 
@@ -1050,20 +1050,20 @@ handle_meta_if (gpgrt_argparse_t *arg, unsigned int alternate, char *args)
       return 0;
     }
 
-  for (p = str1; *p && !(isascii (*p) && isspace (*p)); p++)
+  for (p = str1; *p && !(isascii ((unsigned char)*p) && isspace ((unsigned char)*p)); p++)
     ;
   if (*p)
     {
       *p++ = 0;
-      for (; *p && isascii (*p) && isspace (*p); p++)
+      for (; *p && isascii ((unsigned char)*p) && isspace ((unsigned char)*p); p++)
         ;
       op = p;
-      for (; *p && !(isascii (*p) && isspace (*p)); p++)
+      for (; *p && !(isascii ((unsigned char)*p) && isspace ((unsigned char)*p)); p++)
         ;
       if (*p)
         {
           *p++ = 0;
-          for (; *p && isascii (*p) && isspace (*p); p++)
+          for (; *p && isascii ((unsigned char)*p) && isspace ((unsigned char)*p); p++)
             ;
           if (*p)
             str2 = p;
@@ -1207,7 +1207,7 @@ handle_meta_let (gpgrt_argparse_t *arg, unsigned int alternate, char *args)
   int rc;
   variable_t v;
 
-  for (value = name; *value && !(isascii (*value) && isspace (*value)); value++)
+  for (value = name; *value && !(isascii ((unsigned char)*value) && isspace ((unsigned char)*value)); value++)
     ;
   if (*value)
     {
@@ -1215,7 +1215,7 @@ handle_meta_let (gpgrt_argparse_t *arg, unsigned int alternate, char *args)
       trim_spaces (value);
     }
 
-  if (!isascii (*name) || !isalpha (*name))
+  if (!isascii ((unsigned char)*name) || !isalpha ((unsigned char)*name))
     return 0; /* Ignore setting a system or invalid variable.  */
 
   if (alternate)
@@ -1259,7 +1259,7 @@ handle_meta_getenv (gpgrt_argparse_t *arg, unsigned int alternate, char *args)
 #endif
 
   for (varname = name;
-       *varname && !(isascii (*varname) && isspace (*varname));
+       *varname && !(isascii ((unsigned char)*varname) && isspace ((unsigned char)*varname));
        varname++)
     ;
   if (*varname)
@@ -1268,7 +1268,7 @@ handle_meta_getenv (gpgrt_argparse_t *arg, unsigned int alternate, char *args)
       trim_spaces (varname);
     }
 
-  if (!isascii (*name) || !isalpha (*name))
+  if (!isascii ((unsigned char)*name) || !isalpha ((unsigned char)*name))
     return 0; /* Ignore setting a system or invalid variable.  */
 
   if (!*varname)
@@ -1430,7 +1430,7 @@ handle_metacmd (gpgrt_argparse_t *arg, char *keyword)
   char *rest;
   int i;
 
-  for (rest = keyword; *rest && !(isascii (*rest) && isspace (*rest)); rest++)
+  for (rest = keyword; *rest && !(isascii ((unsigned char)*rest) && isspace ((unsigned char)*rest)); rest++)
     ;
   if (*rest)
     {
@@ -2867,7 +2867,7 @@ set_opt_arg (gpgrt_argparse_t *arg, unsigned flags, char *s)
       return 0;
 
     case ARGPARSE_TYPE_ULONG:
-      while (isascii (*s) && isspace(*s))
+      while (isascii ((unsigned char)*s) && isspace((unsigned char)*s))
         s++;
       if (*s == '-')
         {
